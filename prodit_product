
--=======================================================
--  Entity decleration
--=======================================================
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity prodit is
port(
	CLK : in std_logic;
	BIT_in : in std_logic;
	Reset : in std_logic;
	en_in : in std_logic;
	en_out : out std_logic;
	BIT_out : out std_logic
	);
end entity;



--=======================================================
-- Architecture declaration
--=======================================================

architecture prodit_arch of prodit is
-- Signaler

signal en1 : std_logic;
signal en2 : std_logic;
signal en3 : std_logic;
signal en4 : std_logic;
signal en5 : std_logic;
signal en6 : std_logic;
signal en7 : std_logic;


signal mes1 : STD_LOGIC_VECTOR(255 DOWNTO 0);
signal mes2 : STD_LOGIC_VECTOR(255 DOWNTO 0);
signal mes3 : STD_LOGIC_VECTOR(255 DOWNTO 0);
signal mes4 : STD_LOGIC_VECTOR(255 DOWNTO 0);
signal mes5 : STD_LOGIC_VECTOR(255 DOWNTO 0);



signal syn : std_logic_vector(15 downto 0);

signal F0 : std_logic;
signal F1 : std_logic;
signal F2 : std_logic;
signal E1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
signal E21 : STD_LOGIC_VECTOR(8 DOWNTO 0);
signal E22 : STD_LOGIC_VECTOR(8 DOWNTO 0);

signal bitten : std_logic;
signal bitten1 : std_logic;

-- Komponenter



COMPONENT sam_mes
	PORT
	(
		clk : in  STD_LOGIC;
		reset : in  STD_LOGIC;
		bit_in : in std_logic;
		en_in : in std_logic;
		mes : out STD_LOGIC_VECTOR (255 downto 0);
		en_sig : out std_logic
	);
END COMPONENT;


COMPONENT noise
	PORT
	(
		en_in : in std_logic;
      CLK     	   : in  std_logic;
      dat_in 		: in std_logic_vector(255 downto 0);
		dat_out 		: out std_logic_vector(255 downto 0);
		en_out : out std_logic
	);
END COMPONENT;

COMPONENT syndrome_calc
	PORT
	(
		en_in : in std_logic;
		clk : in  STD_LOGIC;
		reset : in  STD_LOGIC;
		message : in  STD_LOGIC_VECTOR (0 to 255);
		syndrome_bits : out STD_LOGIC_VECTOR (0 to 15);
		message_out : out  STD_LOGIC_VECTOR (0 to 255);
		en_out : out std_logic
	);
END COMPONENT;

COMPONENT dekodstor
	PORT
	(
				en_in : in std_logic;
			s1 : in std_logic_vector(7 downto 0);
			s3 : in std_logic_vector(7 downto 0);
			CLK : in std_logic;
			Message_in: in std_logic_vector(255 downto 0);
			Message_out: out std_logic_vector(255 downto 0);
			f0  : out std_logic;
			f1  : out std_logic;
			f2  : out std_logic;
			e1  : out std_logic_vector(7 downto 0);
			e21  : out std_logic_vector(8 downto 0);
			e22  : out std_logic_vector(8 downto 0);
			en_out : out std_logic
	);
END COMPONENT;

COMPONENT fejlret_stor
	PORT
	(
		en_in : in std_logic;
		CLK : in std_logic;
		f0  : in std_logic;
		f1  :	in std_logic;
		f2  : in std_logic;
		e1  : in std_logic_vector(7 downto 0);
		e21 :  in std_logic_vector(8 downto 0);
		e22 : in std_logic_vector(8 downto 0);
		dat_in : in std_logic_vector(255 downto 0);
		dat_out : out std_logic_vector(255 downto 0);
		en_out : out std_logic
	);
END COMPONENT;

COMPONENT del_mes
	PORT
	(
		en_in : in std_logic;
		clk : in  STD_LOGIC;
		reset : in  STD_LOGIC;
		mes : in STD_LOGIC_VECTOR (255 downto 0);
		en_out : out std_logic;
		bit_out : out std_logic
	);
END COMPONENT;

COMPONENT iteration
	PORT
	(
		CLK		:	 IN STD_LOGIC;
		BIT_in		:	 IN STD_LOGIC;
		Reset		:	 IN STD_LOGIC;
		en_in		:	 IN STD_LOGIC;
		en_out		:	 OUT STD_LOGIC;
		BIT_out		:	 OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT sam_tabel
	PORT
	(
		CLK		:	 IN STD_LOGIC;
		BIT_in		:	 IN STD_LOGIC;
		Reset		:	 IN STD_LOGIC;
		en_in		:	 IN STD_LOGIC;
		en_out		:	 OUT STD_LOGIC;
		BIT_out		:	 OUT STD_LOGIC
	);
END COMPONENT;




begin

-- Port sÃ¦tning

	sam_mes1 : sam_mes port map(clk  => CLK,	reset => Reset, bit_in => BIT_in, en_in => en_in, mes => mes1, en_sig => en1);
	noise1 : noise port map (en_in => en1, CLK => CLK, dat_in => mes1, dat_out => mes2, en_out => en2);
	syndrome_calc1 : syndrome_calc port map (en_in => en2, clk	=> CLK, reset => Reset, message => mes2, syndrome_bits	=> syn, message_out => mes3, en_out => en3);
	dekodstor1 : dekodstor port map (en_in => en3 ,s1	=> syn(15 downto 8), s3	=> syn(7 downto 0), CLK => CLK, Message_in => mes3, Message_out => mes4, f0 => F0, f1 => F1, f2 => F2, e1 => E1, e21 => E21, e22 => E22, en_out => en4);
	fejlret_stor1 : fejlret_stor port map (en_in => en4, CLK => CLK, f0	=> F0, f1 => F1, f2 => F2, e1 => E1, e21 => E21, e22	=> E22, dat_in	=> mes4, dat_out => mes5, en_out => en5 );
	del_mes1 : del_mes port map (en_in => en5, clk => CLK, reset => Reset, mes	=> mes5, bit_out => bitten, en_out => en6);
	
	sam_tabel1 : sam_tabel port map(CLK => CLK, BIT_in => bitten, Reset => Reset, en_in => en6, en_out => en7, BIT_out =>bitten1);
	iteration1 : iteration port map(	CLK => CLK, BIT_in => bitten1, Reset => Reset, en_in => en7, en_out => en_out, BIT_out	=> BIT_out);
	
	


end architecture;
